type Query {
    allLink(filterNeedle: String, skip: Int, take: Int): [Link!]! # Retourne tous les "Links" en SQLite
    uniqueLink(id: Int!): Link! # Retourne tous les "Links" en SQLite via son id
    allComment: [Comment!]! # Retourne tous les "Comment" en SQLite
    uniqueComment(id: Int!): Comment! # Retourne un "Comment" en SQLite via son id
    me: User!
    getUser(id: Int!): User!
}

type Mutation {
    postLink(url: String!, description: String!): Link! # Ajoute un Link en SQLite en lui fournissant une url et une description
    postCommentOnLink(linkId: ID!, body: String!): Comment! # Ajoute un Comment à un Link en SQLite en lui fournissant un body
    signup(email: String!, password: String!, name: String!): AuthPayload # Crée un compte
    login(email: String!, password: String!): AuthPayload # S'authentifie
    vote(linkId: ID!): Vote
}

type Link {
    id: ID!
    description: String!
    url: String!
    comments: [Comment!]! # Permet de retourner un Link avec un tableau de ses commentaires
    postedBy: User
    votes: [Vote!]!
}

type Comment {
    id: ID!
    body: String!
    linkId: Int!
    links: [Link!]! # Permet de retourner les commentaires d'un Link
}

type AuthPayload {
    token: String
    user: User
}
 
type User {
    id: ID!
    name: String!
    email: String!
    links: [Link!]!
    comments: [Comment!]!
}

type Subscription {
  newLink: Link!
  newVote: Vote!
}
type Vote {
  id: ID!
  link: Link!
  user: User!
}
